<?php
/**
 * SignatureRequestProofBundle
 *
 * PHP version 5
 *
 * @category Class
 * @package  WooletClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 * Woleet API
 *
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation.
 *
 * OpenAPI spec version: 1.10.0
 * Contact: contact@woleet.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WooletClient\Model;

use \ArrayAccess;
use \WooletClient\ObjectSerializer;

/**
 * SignatureRequestProofBundle Class Doc Comment
 *
 * @category Class
 * @description A bundle of all the pieces of evidence of a signature request.
 * @package  WooletClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SignatureRequestProofBundle implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'signatureRequestProofBundle';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'signature_receipts' => '\WooletClient\Model\Receipt[]',
        'audit_trail_receipt' => '\WooletClient\Model\Receipt',
        'audit_trail_data' => 'string',
        'complete' => 'bool'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'signature_receipts' => null,
        'audit_trail_receipt' => null,
        'audit_trail_data' => null,
        'complete' => null];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'signature_receipts' => 'signatureReceipts',
        'audit_trail_receipt' => 'auditTrailReceipt',
        'audit_trail_data' => 'auditTrailData',
        'complete' => 'complete'];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'signature_receipts' => 'setSignatureReceipts',
        'audit_trail_receipt' => 'setAuditTrailReceipt',
        'audit_trail_data' => 'setAuditTrailData',
        'complete' => 'setComplete'];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'signature_receipts' => 'getSignatureReceipts',
        'audit_trail_receipt' => 'getAuditTrailReceipt',
        'audit_trail_data' => 'getAuditTrailData',
        'complete' => 'getComplete'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['signature_receipts'] = isset($data['signature_receipts']) ? $data['signature_receipts'] : null;
        $this->container['audit_trail_receipt'] = isset($data['audit_trail_receipt']) ? $data['audit_trail_receipt'] : null;
        $this->container['audit_trail_data'] = isset($data['audit_trail_data']) ? $data['audit_trail_data'] : null;
        $this->container['complete'] = isset($data['complete']) ? $data['complete'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets signature_receipts
     *
     * @return \WooletClient\Model\Receipt[]
     */
    public function getSignatureReceipts()
    {
        return $this->container['signature_receipts'];
    }

    /**
     * Sets signature_receipts
     *
     * @param \WooletClient\Model\Receipt[] $signature_receipts Proof receipts of the signatures of the file by the signers
     *
     * @return $this
     */
    public function setSignatureReceipts($signature_receipts)
    {
        $this->container['signature_receipts'] = $signature_receipts;
        return $this;
    }

    /**
     * Gets audit_trail_receipt
     *
     * @return \WooletClient\Model\Receipt
     */
    public function getAuditTrailReceipt()
    {
        return $this->container['audit_trail_receipt'];
    }

    /**
     * Sets audit_trail_receipt
     *
     * @param \WooletClient\Model\Receipt $audit_trail_receipt audit_trail_receipt
     *
     * @return $this
     */
    public function setAuditTrailReceipt($audit_trail_receipt)
    {
        $this->container['audit_trail_receipt'] = $audit_trail_receipt;
        return $this;
    }

    /**
     * Gets audit_trail_data
     *
     * @return string
     */
    public function getAuditTrailData()
    {
        return $this->container['audit_trail_data'];
    }

    /**
     * Sets audit_trail_data
     *
     * @param string $audit_trail_data Audit trail data (Base64 encoded JSON object)
     *
     * @return $this
     */
    public function setAuditTrailData($audit_trail_data)
    {
        $this->container['audit_trail_data'] = $audit_trail_data;
        return $this;
    }

    /**
     * Gets complete
     *
     * @return bool
     */
    public function getComplete()
    {
        return $this->container['complete'];
    }

    /**
     * Sets complete
     *
     * @param bool $complete `true` if all pieces of evidence are present in the proof bundle, or `false` if not<br> All the following conditions must be met:<br> - the signature request is COMPLETED (by the platform) or CLOSED (by the requester)<br> - the audit trail is generated and signed by the platform<br> - all the proof receipts are available
     *
     * @return $this
     */
    public function setComplete($complete)
    {
        $this->container['complete'] = $complete;
        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
