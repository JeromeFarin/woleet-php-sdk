<?php
/**
 * Receipt
 *
 * PHP version 5
 *
 * @category Class
 * @package  WooletClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 * Woleet API
 *
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation.
 *
 * OpenAPI spec version: 1.10.0
 * Contact: contact@woleet.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WooletClient\Model;

use \ArrayAccess;
use \WooletClient\ObjectSerializer;

/**
 * Receipt Class Doc Comment
 *
 * @category Class
 * @description A proof receipt:&lt;br&gt; - the proof of timestamp is provided as a Chainpoint 2.x proof receipt.&lt;br&gt; - the proof of signature (if applicable) is provided in the &#x60;signature&#x60; property.&lt;br&gt; If the proof receipt is partial (ie. does not contain the proof of timestamp) Chainpoint 2.x fields are not provided.
 * @package  WooletClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Receipt implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'receipt';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'target_hash' => 'string',
        'type' => 'string',
        'merkle_root' => 'string',
        'proof' => '\WooletClient\Model\ReceiptProofNode[]',
        'anchors' => '\WooletClient\Model\ReceiptAnchorsNode[]',
        'partial' => 'bool',
        'signature' => '\WooletClient\Model\ReceiptSignature'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'target_hash' => null,
        'type' => null,
        'merkle_root' => null,
        'proof' => null,
        'anchors' => null,
        'partial' => null,
        'signature' => null];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'target_hash' => 'targetHash',
        'type' => 'type',
        'merkle_root' => 'merkleRoot',
        'proof' => 'proof',
        'anchors' => 'anchors',
        'partial' => 'partial',
        'signature' => 'signature'];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'target_hash' => 'setTargetHash',
        'type' => 'setType',
        'merkle_root' => 'setMerkleRoot',
        'proof' => 'setProof',
        'anchors' => 'setAnchors',
        'partial' => 'setPartial',
        'signature' => 'setSignature'];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'target_hash' => 'getTargetHash',
        'type' => 'getType',
        'merkle_root' => 'getMerkleRoot',
        'proof' => 'getProof',
        'anchors' => 'getAnchors',
        'partial' => 'getPartial',
        'signature' => 'getSignature'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['target_hash'] = isset($data['target_hash']) ? $data['target_hash'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['merkle_root'] = isset($data['merkle_root']) ? $data['merkle_root'] : null;
        $this->container['proof'] = isset($data['proof']) ? $data['proof'] : null;
        $this->container['anchors'] = isset($data['anchors']) ? $data['anchors'] : null;
        $this->container['partial'] = isset($data['partial']) ? $data['partial'] : null;
        $this->container['signature'] = isset($data['signature']) ? $data['signature'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets target_hash
     *
     * @return string
     */
    public function getTargetHash()
    {
        return $this->container['target_hash'];
    }

    /**
     * Sets target_hash
     *
     * @param string $target_hash SHA256 hash of the proven data or signature.
     *
     * @return $this
     */
    public function setTargetHash($target_hash)
    {
        $this->container['target_hash'] = $target_hash;
        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Chainpoint 2.x: Type of the proof receipt.<br> **Currently only 'ChainpointSHA256v2' is supported.**
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;
        return $this;
    }

    /**
     * Gets merkle_root
     *
     * @return string
     */
    public function getMerkleRoot()
    {
        return $this->container['merkle_root'];
    }

    /**
     * Sets merkle_root
     *
     * @param string $merkle_root Chainpoint 2.x: Root of the Merkle tree.
     *
     * @return $this
     */
    public function setMerkleRoot($merkle_root)
    {
        $this->container['merkle_root'] = $merkle_root;
        return $this;
    }

    /**
     * Gets proof
     *
     * @return \WooletClient\Model\ReceiptProofNode[]
     */
    public function getProof()
    {
        return $this->container['proof'];
    }

    /**
     * Sets proof
     *
     * @param \WooletClient\Model\ReceiptProofNode[] $proof Chainpoint 2.x: Merkle proof (path from `targetHash` to `merkleRoot` in the Merkle tree).
     *
     * @return $this
     */
    public function setProof($proof)
    {
        $this->container['proof'] = $proof;
        return $this;
    }

    /**
     * Gets anchors
     *
     * @return \WooletClient\Model\ReceiptAnchorsNode[]
     */
    public function getAnchors()
    {
        return $this->container['anchors'];
    }

    /**
     * Sets anchors
     *
     * @param \WooletClient\Model\ReceiptAnchorsNode[] $anchors Chainpoint 2.x: List of sources where the root of the Merkle proof is anchored.
     *
     * @return $this
     */
    public function setAnchors($anchors)
    {
        $this->container['anchors'] = $anchors;
        return $this;
    }

    /**
     * Gets partial
     *
     * @return bool
     */
    public function getPartial()
    {
        return $this->container['partial'];
    }

    /**
     * Sets partial
     *
     * @param bool $partial `true` if the receipt is partial (ie. does not contain the Chainpoint 2.x proof of timestamp)
     *
     * @return $this
     */
    public function setPartial($partial)
    {
        $this->container['partial'] = $partial;
        return $this;
    }

    /**
     * Gets signature
     *
     * @return \WooletClient\Model\ReceiptSignature
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param \WooletClient\Model\ReceiptSignature $signature signature
     *
     * @return $this
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;
        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
