<?php
/**
 * IdentityVerificationStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  WooletClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 * Woleet API
 *
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation.
 *
 * OpenAPI spec version: 1.10.0
 * Contact: contact@woleet.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WooletClient\Model;

use \ArrayAccess;
use \WooletClient\ObjectSerializer;

/**
 * IdentityVerificationStatus Class Doc Comment
 *
 * @category Class
 * @package  WooletClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IdentityVerificationStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'identityVerificationStatus';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'code' => 'string',
        'text' => 'string',
        'certificates' => '\WooletClient\Model\X509SubjectIssuer[]',
        'identity' => '\WooletClient\Model\Identity',
        'signed_identity' => '\WooletClient\Model\Identity',
        'signed_issuer_domain' => 'string',
        'key' => '\WooletClient\Model\Key'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'code' => null,
        'text' => null,
        'certificates' => null,
        'identity' => null,
        'signed_identity' => null,
        'signed_issuer_domain' => null,
        'key' => null];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'text' => 'text',
        'certificates' => 'certificates',
        'identity' => 'identity',
        'signed_identity' => 'signedIdentity',
        'signed_issuer_domain' => 'signedIssuerDomain',
        'key' => 'key'];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'text' => 'setText',
        'certificates' => 'setCertificates',
        'identity' => 'setIdentity',
        'signed_identity' => 'setSignedIdentity',
        'signed_issuer_domain' => 'setSignedIssuerDomain',
        'key' => 'setKey'];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'text' => 'getText',
        'certificates' => 'getCertificates',
        'identity' => 'getIdentity',
        'signed_identity' => 'getSignedIdentity',
        'signed_issuer_domain' => 'getSignedIssuerDomain',
        'key' => 'getKey'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CODE_VERIFIED = 'VERIFIED';
    const CODE_HTTP_ERROR = 'HTTP_ERROR';
    const CODE_IDENTITY_NOT_FOUND = 'IDENTITY_NOT_FOUND';
    const CODE_IDENTITY_MISMATCH = 'IDENTITY_MISMATCH';
    const CODE_INVALID_SIGNATURE = 'INVALID_SIGNATURE';
    const CODE_DEPRECATED_KEY = 'DEPRECATED_KEY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_VERIFIED,
            self::CODE_HTTP_ERROR,
            self::CODE_IDENTITY_NOT_FOUND,
            self::CODE_IDENTITY_MISMATCH,
            self::CODE_INVALID_SIGNATURE,
            self::CODE_DEPRECATED_KEY,];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['certificates'] = isset($data['certificates']) ? $data['certificates'] : null;
        $this->container['identity'] = isset($data['identity']) ? $data['identity'] : null;
        $this->container['signed_identity'] = isset($data['signed_identity']) ? $data['signed_identity'] : null;
        $this->container['signed_issuer_domain'] = isset($data['signed_issuer_domain']) ? $data['signed_issuer_domain'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Identity verification status code:<br> - VERIFIED: success: the signature key is controlled by the identity server (ie. the server provided a valid proof of ownership of the key),<br> and/or the signature key matches an identity on the identity server (ie. the server claimed the signer identity),<br> and/or the identity is signed (ie. the signer claimed his identity by including it in the signed data),<br> and/or the signed identity matches the one on the identity server (both the signer and the identity server claim the identity),<br> - HTTP_ERROR: error: the identity URL cannot be called or returned an HTTP error other than 404<br> - IDENTITY_NOT_FOUND: error: the key does not match any identity on the identity server (ie. the identity URL returned a HTTP error 404)<br> - IDENTITY_MISMATCH: error: the signed identity mismatches the identity on the identity server<br> - INVALID_SIGNATURE: error: the identity server returned an invalid signature (ie. the server failed to provide a valid proof of ownership of the key)<br> - DEPRECATED_KEY: error: the key expired or was revoked before the signature timestamp.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($code) && !in_array($code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code'] = $code;
        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text Identity verification status text (gives more insights about the verification process).
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;
        return $this;
    }

    /**
     * Gets certificates
     *
     * @return \WooletClient\Model\X509SubjectIssuer[]
     */
    public function getCertificates()
    {
        return $this->container['certificates'];
    }

    /**
     * Sets certificates
     *
     * @param \WooletClient\Model\X509SubjectIssuer[] $certificates Array of subjects and issuers of the certificates extracted from the identity URL's TLS certificate.
     *
     * @return $this
     */
    public function setCertificates($certificates)
    {
        $this->container['certificates'] = $certificates;
        return $this;
    }

    /**
     * Gets identity
     *
     * @return \WooletClient\Model\Identity
     */
    public function getIdentity()
    {
        return $this->container['identity'];
    }

    /**
     * Sets identity
     *
     * @param \WooletClient\Model\Identity $identity identity
     *
     * @return $this
     */
    public function setIdentity($identity)
    {
        $this->container['identity'] = $identity;
        return $this;
    }

    /**
     * Gets signed_identity
     *
     * @return \WooletClient\Model\Identity
     */
    public function getSignedIdentity()
    {
        return $this->container['signed_identity'];
    }

    /**
     * Sets signed_identity
     *
     * @param \WooletClient\Model\Identity $signed_identity signed_identity
     *
     * @return $this
     */
    public function setSignedIdentity($signed_identity)
    {
        $this->container['signed_identity'] = $signed_identity;
        return $this;
    }

    /**
     * Gets signed_issuer_domain
     *
     * @return string
     */
    public function getSignedIssuerDomain()
    {
        return $this->container['signed_issuer_domain'];
    }

    /**
     * Sets signed_issuer_domain
     *
     * @param string $signed_issuer_domain Domain name of the identity issuer (ie. of the organization who verified the identity).
     *
     * @return $this
     */
    public function setSignedIssuerDomain($signed_issuer_domain)
    {
        $this->container['signed_issuer_domain'] = $signed_issuer_domain;
        return $this;
    }

    /**
     * Gets key
     *
     * @return \WooletClient\Model\Key
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param \WooletClient\Model\Key $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;
        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
