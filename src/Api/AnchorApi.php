<?php
/**
 * AnchorApi
 * PHP version 5
 *
 * @category Class
 * @package  WooletClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 * Woleet API
 *
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation.
 *
 * OpenAPI spec version: 1.10.0
 * Contact: contact@woleet.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WooletClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WooletClient\ApiException;
use WooletClient\Configuration;
use WooletClient\HeaderSelector;
use WooletClient\ObjectSerializer;

/**
 * AnchorApi Class Doc Comment
 *
 * @category Class
 * @package  WooletClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AnchorApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    )
    {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAnchor
     *
     * Create a new anchor.
     *
     * @param \WooletClient\Model\Anchor $body Anchor object to create. (required)
     *
     * @return \WooletClient\Model\Anchor
     * @throws \InvalidArgumentException
     * @throws \WooletClient\ApiException on non-2xx response
     */
    public function createAnchor($body)
    {
        list($response) = $this->createAnchorWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAnchorWithHttpInfo
     *
     * Create a new anchor.
     *
     * @param \WooletClient\Model\Anchor $body Anchor object to create. (required)
     *
     * @return array of \WooletClient\Model\Anchor, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \WooletClient\ApiException on non-2xx response
     */
    public function createAnchorWithHttpInfo($body)
    {
        $returnType = '\WooletClient\Model\Anchor';
        $request = $this->createAnchorRequest($body);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            $statusCode = $response->getStatusCode();
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WooletClient\Model\Anchor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAnchorAsync
     *
     * Create a new anchor.
     *
     * @param \WooletClient\Model\Anchor $body Anchor object to create. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function createAnchorAsync($body)
    {
        return $this->createAnchorAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAnchorAsyncWithHttpInfo
     *
     * Create a new anchor.
     *
     * @param \WooletClient\Model\Anchor $body Anchor object to create. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function createAnchorAsyncWithHttpInfo($body)
    {
        $returnType = '\WooletClient\Model\Anchor';
        $request = $this->createAnchorRequest($body);
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAnchor'
     *
     * @param \WooletClient\Model\Anchor $body Anchor object to create. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function createAnchorRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createAnchor'
            );
        }
        $resourcePath = '/anchor';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );
        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAnchor
     *
     * Delete an anchor.
     *
     * @param string $anchor_id Identifier of the anchor to delete. (required)
     *
     * @return void
     * @throws \InvalidArgumentException
     * @throws \WooletClient\ApiException on non-2xx response
     */
    public function deleteAnchor($anchor_id)
    {
        $this->deleteAnchorWithHttpInfo($anchor_id);
    }

    /**
     * Operation deleteAnchorWithHttpInfo
     *
     * Delete an anchor.
     *
     * @param string $anchor_id Identifier of the anchor to delete. (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \WooletClient\ApiException on non-2xx response
     */
    public function deleteAnchorWithHttpInfo($anchor_id)
    {
        $returnType = '';
        $request = $this->deleteAnchorRequest($anchor_id);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            $statusCode = $response->getStatusCode();
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAnchorAsync
     *
     * Delete an anchor.
     *
     * @param string $anchor_id Identifier of the anchor to delete. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function deleteAnchorAsync($anchor_id)
    {
        return $this->deleteAnchorAsyncWithHttpInfo($anchor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAnchorAsyncWithHttpInfo
     *
     * Delete an anchor.
     *
     * @param string $anchor_id Identifier of the anchor to delete. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function deleteAnchorAsyncWithHttpInfo($anchor_id)
    {
        $returnType = '';
        $request = $this->deleteAnchorRequest($anchor_id);
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAnchor'
     *
     * @param string $anchor_id Identifier of the anchor to delete. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function deleteAnchorRequest($anchor_id)
    {
        // verify the required parameter 'anchor_id' is set
        if ($anchor_id === null || (is_array($anchor_id) && count($anchor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $anchor_id when calling deleteAnchor'
            );
        }
        $resourcePath = '/anchor/{anchorId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        // path params
        if ($anchor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'anchorId' . '}',
                ObjectSerializer::toPathValue($anchor_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );
        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAnchor
     *
     * Get an anchor by its identifier.
     *
     * @param string $anchor_id Identifier of the anchor to retrieve. (required)
     *
     * @return \WooletClient\Model\Anchor
     * @throws \InvalidArgumentException
     * @throws \WooletClient\ApiException on non-2xx response
     */
    public function getAnchor($anchor_id)
    {
        list($response) = $this->getAnchorWithHttpInfo($anchor_id);
        return $response;
    }

    /**
     * Operation getAnchorWithHttpInfo
     *
     * Get an anchor by its identifier.
     *
     * @param string $anchor_id Identifier of the anchor to retrieve. (required)
     *
     * @return array of \WooletClient\Model\Anchor, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \WooletClient\ApiException on non-2xx response
     */
    public function getAnchorWithHttpInfo($anchor_id)
    {
        $returnType = '\WooletClient\Model\Anchor';
        $request = $this->getAnchorRequest($anchor_id);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            $statusCode = $response->getStatusCode();
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WooletClient\Model\Anchor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAnchorAsync
     *
     * Get an anchor by its identifier.
     *
     * @param string $anchor_id Identifier of the anchor to retrieve. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getAnchorAsync($anchor_id)
    {
        return $this->getAnchorAsyncWithHttpInfo($anchor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnchorAsyncWithHttpInfo
     *
     * Get an anchor by its identifier.
     *
     * @param string $anchor_id Identifier of the anchor to retrieve. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getAnchorAsyncWithHttpInfo($anchor_id)
    {
        $returnType = '\WooletClient\Model\Anchor';
        $request = $this->getAnchorRequest($anchor_id);
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnchor'
     *
     * @param string $anchor_id Identifier of the anchor to retrieve. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function getAnchorRequest($anchor_id)
    {
        // verify the required parameter 'anchor_id' is set
        if ($anchor_id === null || (is_array($anchor_id) && count($anchor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $anchor_id when calling getAnchor'
            );
        }
        $resourcePath = '/anchor/{anchorId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        // path params
        if ($anchor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'anchorId' . '}',
                ObjectSerializer::toPathValue($anchor_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );
        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAnchorAttestation
     *
     * Download the Proof Attestation document of an anchor.
     *
     * @param string $anchor_id Identifier of the anchor. (required)
     *
     * @return \WooletClient\Model\PdfFile
     * @throws \InvalidArgumentException
     * @throws \WooletClient\ApiException on non-2xx response
     */
    public function getAnchorAttestation($anchor_id)
    {
        list($response) = $this->getAnchorAttestationWithHttpInfo($anchor_id);
        return $response;
    }

    /**
     * Operation getAnchorAttestationWithHttpInfo
     *
     * Download the Proof Attestation document of an anchor.
     *
     * @param string $anchor_id Identifier of the anchor. (required)
     *
     * @return array of \WooletClient\Model\PdfFile, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \WooletClient\ApiException on non-2xx response
     */
    public function getAnchorAttestationWithHttpInfo($anchor_id)
    {
        $returnType = '\WooletClient\Model\PdfFile';
        $request = $this->getAnchorAttestationRequest($anchor_id);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            $statusCode = $response->getStatusCode();
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WooletClient\Model\PdfFile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAnchorAttestationAsync
     *
     * Download the Proof Attestation document of an anchor.
     *
     * @param string $anchor_id Identifier of the anchor. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getAnchorAttestationAsync($anchor_id)
    {
        return $this->getAnchorAttestationAsyncWithHttpInfo($anchor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnchorAttestationAsyncWithHttpInfo
     *
     * Download the Proof Attestation document of an anchor.
     *
     * @param string $anchor_id Identifier of the anchor. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getAnchorAttestationAsyncWithHttpInfo($anchor_id)
    {
        $returnType = '\WooletClient\Model\PdfFile';
        $request = $this->getAnchorAttestationRequest($anchor_id);
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnchorAttestation'
     *
     * @param string $anchor_id Identifier of the anchor. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function getAnchorAttestationRequest($anchor_id)
    {
        // verify the required parameter 'anchor_id' is set
        if ($anchor_id === null || (is_array($anchor_id) && count($anchor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $anchor_id when calling getAnchorAttestation'
            );
        }
        $resourcePath = '/anchor/{anchorId}/attestation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        // path params
        if ($anchor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'anchorId' . '}',
                ObjectSerializer::toPathValue($anchor_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );
        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchAnchorIds
     *
     * Search for public anchor identifiers.
     *
     * @param int $page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param int $size Number of anchor identifiers per page. (optional, default to 20)
     * @param string $hash &#x60;hash&#x60; to search for: all public anchors whose &#x60;hash&#x60; property is equal are returned. (optional)
     * @param string $signed_hash &#x60;signedHash&#x60; to search for: all public anchors whose &#x60;signedHash&#x60; property is equal are returned. (optional)
     *
     * @return \WooletClient\Model\AnchorIds
     * @throws \InvalidArgumentException
     * @throws \WooletClient\ApiException on non-2xx response
     */
    public function searchAnchorIds($page = '0', $size = '20', $hash = null, $signed_hash = null)
    {
        list($response) = $this->searchAnchorIdsWithHttpInfo($page, $size, $hash, $signed_hash);
        return $response;
    }

    /**
     * Operation searchAnchorIdsWithHttpInfo
     *
     * Search for public anchor identifiers.
     *
     * @param int $page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param int $size Number of anchor identifiers per page. (optional, default to 20)
     * @param string $hash &#x60;hash&#x60; to search for: all public anchors whose &#x60;hash&#x60; property is equal are returned. (optional)
     * @param string $signed_hash &#x60;signedHash&#x60; to search for: all public anchors whose &#x60;signedHash&#x60; property is equal are returned. (optional)
     *
     * @return array of \WooletClient\Model\AnchorIds, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \WooletClient\ApiException on non-2xx response
     */
    public function searchAnchorIdsWithHttpInfo($page = '0', $size = '20', $hash = null, $signed_hash = null)
    {
        $returnType = '\WooletClient\Model\AnchorIds';
        $request = $this->searchAnchorIdsRequest($page, $size, $hash, $signed_hash);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            $statusCode = $response->getStatusCode();
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WooletClient\Model\AnchorIds',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchAnchorIdsAsync
     *
     * Search for public anchor identifiers.
     *
     * @param int $page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param int $size Number of anchor identifiers per page. (optional, default to 20)
     * @param string $hash &#x60;hash&#x60; to search for: all public anchors whose &#x60;hash&#x60; property is equal are returned. (optional)
     * @param string $signed_hash &#x60;signedHash&#x60; to search for: all public anchors whose &#x60;signedHash&#x60; property is equal are returned. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function searchAnchorIdsAsync($page = '0', $size = '20', $hash = null, $signed_hash = null)
    {
        return $this->searchAnchorIdsAsyncWithHttpInfo($page, $size, $hash, $signed_hash)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAnchorIdsAsyncWithHttpInfo
     *
     * Search for public anchor identifiers.
     *
     * @param int $page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param int $size Number of anchor identifiers per page. (optional, default to 20)
     * @param string $hash &#x60;hash&#x60; to search for: all public anchors whose &#x60;hash&#x60; property is equal are returned. (optional)
     * @param string $signed_hash &#x60;signedHash&#x60; to search for: all public anchors whose &#x60;signedHash&#x60; property is equal are returned. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function searchAnchorIdsAsyncWithHttpInfo($page = '0', $size = '20', $hash = null, $signed_hash = null)
    {
        $returnType = '\WooletClient\Model\AnchorIds';
        $request = $this->searchAnchorIdsRequest($page, $size, $hash, $signed_hash);
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchAnchorIds'
     *
     * @param int $page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param int $size Number of anchor identifiers per page. (optional, default to 20)
     * @param string $hash &#x60;hash&#x60; to search for: all public anchors whose &#x60;hash&#x60; property is equal are returned. (optional)
     * @param string $signed_hash &#x60;signedHash&#x60; to search for: all public anchors whose &#x60;signedHash&#x60; property is equal are returned. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function searchAnchorIdsRequest($page = '0', $size = '20', $hash = null, $signed_hash = null)
    {

        $resourcePath = '/anchorIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size, null);
        }
        // query params
        if ($hash !== null) {
            $queryParams['hash'] = ObjectSerializer::toQueryValue($hash, null);
        }
        // query params
        if ($signed_hash !== null) {
            $queryParams['signedHash'] = ObjectSerializer::toQueryValue($signed_hash, null);
        }
        // body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );
        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchAnchors
     *
     * Search for anchors.
     *
     * @param int $page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param int $size Number of anchors per page. (optional, default to 20)
     * @param string $direction Sorting direction: ASC for ascending DESC for descending. (optional, default to ASC)
     * @param string $sort Sorting property: possible values are limited to &#x60;created&#x60;, &#x60;hash&#x60; and &#x60;signedHash&#x60;. (optional, default to created)
     * @param string $name &#x60;name&#x60; to search for: all anchors whose &#x60;name&#x60; property contains this sub-string are returned.&lt;br&gt; **WARNING: Searching by name can timeout on a large anchor set.** (optional)
     * @param string $hash &#x60;hash&#x60; to search for: all anchors whose &#x60;hash&#x60; property is equal are returned. (optional)
     * @param string $signed_hash &#x60;signedHash&#x60; to search for: all anchors whose &#x60;signedHash&#x60; property is equal are returned. (optional)
     * @param string[] $tags Tags to search for: all anchors having all of these tags sets are returned. (optional)
     *
     * @return \WooletClient\Model\Anchors
     * @throws \WooletClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function searchAnchors($page = '0', $size = '20', $direction = 'ASC', $sort = 'created', $name = null, $hash = null, $signed_hash = null, $tags = null)
    {
        list($response) = $this->searchAnchorsWithHttpInfo($page, $size, $direction, $sort, $name, $hash, $signed_hash, $tags);
        return $response;
    }

    /**
     * Operation searchAnchorsWithHttpInfo
     *
     * Search for anchors.
     *
     * @param int $page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param int $size Number of anchors per page. (optional, default to 20)
     * @param string $direction Sorting direction: ASC for ascending DESC for descending. (optional, default to ASC)
     * @param string $sort Sorting property: possible values are limited to &#x60;created&#x60;, &#x60;hash&#x60; and &#x60;signedHash&#x60;. (optional, default to created)
     * @param string $name &#x60;name&#x60; to search for: all anchors whose &#x60;name&#x60; property contains this sub-string are returned.&lt;br&gt; **WARNING: Searching by name can timeout on a large anchor set.** (optional)
     * @param string $hash &#x60;hash&#x60; to search for: all anchors whose &#x60;hash&#x60; property is equal are returned. (optional)
     * @param string $signed_hash &#x60;signedHash&#x60; to search for: all anchors whose &#x60;signedHash&#x60; property is equal are returned. (optional)
     * @param string[] $tags Tags to search for: all anchors having all of these tags sets are returned. (optional)
     *
     * @return array of \WooletClient\Model\Anchors, HTTP status code, HTTP response headers (array of strings)
     * @throws \WooletClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function searchAnchorsWithHttpInfo($page = '0', $size = '20', $direction = 'ASC', $sort = 'created', $name = null, $hash = null, $signed_hash = null, $tags = null)
    {
        $returnType = '\WooletClient\Model\Anchors';
        $request = $this->searchAnchorsRequest($page, $size, $direction, $sort, $name, $hash, $signed_hash, $tags);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            $statusCode = $response->getStatusCode();
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WooletClient\Model\Anchors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchAnchorsAsync
     *
     * Search for anchors.
     *
     * @param int $page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param int $size Number of anchors per page. (optional, default to 20)
     * @param string $direction Sorting direction: ASC for ascending DESC for descending. (optional, default to ASC)
     * @param string $sort Sorting property: possible values are limited to &#x60;created&#x60;, &#x60;hash&#x60; and &#x60;signedHash&#x60;. (optional, default to created)
     * @param string $name &#x60;name&#x60; to search for: all anchors whose &#x60;name&#x60; property contains this sub-string are returned.&lt;br&gt; **WARNING: Searching by name can timeout on a large anchor set.** (optional)
     * @param string $hash &#x60;hash&#x60; to search for: all anchors whose &#x60;hash&#x60; property is equal are returned. (optional)
     * @param string $signed_hash &#x60;signedHash&#x60; to search for: all anchors whose &#x60;signedHash&#x60; property is equal are returned. (optional)
     * @param string[] $tags Tags to search for: all anchors having all of these tags sets are returned. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function searchAnchorsAsync($page = '0', $size = '20', $direction = 'ASC', $sort = 'created', $name = null, $hash = null, $signed_hash = null, $tags = null)
    {
        return $this->searchAnchorsAsyncWithHttpInfo($page, $size, $direction, $sort, $name, $hash, $signed_hash, $tags)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAnchorsAsyncWithHttpInfo
     *
     * Search for anchors.
     *
     * @param int $page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param int $size Number of anchors per page. (optional, default to 20)
     * @param string $direction Sorting direction: ASC for ascending DESC for descending. (optional, default to ASC)
     * @param string $sort Sorting property: possible values are limited to &#x60;created&#x60;, &#x60;hash&#x60; and &#x60;signedHash&#x60;. (optional, default to created)
     * @param string $name &#x60;name&#x60; to search for: all anchors whose &#x60;name&#x60; property contains this sub-string are returned.&lt;br&gt; **WARNING: Searching by name can timeout on a large anchor set.** (optional)
     * @param string $hash &#x60;hash&#x60; to search for: all anchors whose &#x60;hash&#x60; property is equal are returned. (optional)
     * @param string $signed_hash &#x60;signedHash&#x60; to search for: all anchors whose &#x60;signedHash&#x60; property is equal are returned. (optional)
     * @param string[] $tags Tags to search for: all anchors having all of these tags sets are returned. (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function searchAnchorsAsyncWithHttpInfo($page = '0', $size = '20', $direction = 'ASC', $sort = 'created', $name = null, $hash = null, $signed_hash = null, $tags = null)
    {
        $returnType = '\WooletClient\Model\Anchors';
        $request = $this->searchAnchorsRequest($page, $size, $direction, $sort, $name, $hash, $signed_hash, $tags);
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchAnchors'
     *
     * @param int $page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param int $size Number of anchors per page. (optional, default to 20)
     * @param string $direction Sorting direction: ASC for ascending DESC for descending. (optional, default to ASC)
     * @param string $sort Sorting property: possible values are limited to &#x60;created&#x60;, &#x60;hash&#x60; and &#x60;signedHash&#x60;. (optional, default to created)
     * @param string $name &#x60;name&#x60; to search for: all anchors whose &#x60;name&#x60; property contains this sub-string are returned.&lt;br&gt; **WARNING: Searching by name can timeout on a large anchor set.** (optional)
     * @param string $hash &#x60;hash&#x60; to search for: all anchors whose &#x60;hash&#x60; property is equal are returned. (optional)
     * @param string $signed_hash &#x60;signedHash&#x60; to search for: all anchors whose &#x60;signedHash&#x60; property is equal are returned. (optional)
     * @param string[] $tags Tags to search for: all anchors having all of these tags sets are returned. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function searchAnchorsRequest($page = '0', $size = '20', $direction = 'ASC', $sort = 'created', $name = null, $hash = null, $signed_hash = null, $tags = null)
    {

        $resourcePath = '/anchors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size, null);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($hash !== null) {
            $queryParams['hash'] = ObjectSerializer::toQueryValue($hash, null);
        }
        // query params
        if ($signed_hash !== null) {
            $queryParams['signedHash'] = ObjectSerializer::toQueryValue($signed_hash, null);
        }
        // query params
        if (is_array($tags)) {
            $tags = ObjectSerializer::serializeCollection($tags, 'csv', true);
        }
        if ($tags !== null) {
            $queryParams['tags'] = ObjectSerializer::toQueryValue($tags, null);
        }
        // body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );
        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAnchor
     *
     * Update an anchor.
     *
     * @param \WooletClient\Model\Anchor $body Anchor object to update. (required)
     * @param string $anchor_id Identifier of anchor to update. (required)
     *
     * @return \WooletClient\Model\Anchor
     * @throws \InvalidArgumentException
     * @throws \WooletClient\ApiException on non-2xx response
     */
    public function updateAnchor($body, $anchor_id)
    {
        list($response) = $this->updateAnchorWithHttpInfo($body, $anchor_id);
        return $response;
    }

    /**
     * Operation updateAnchorWithHttpInfo
     *
     * Update an anchor.
     *
     * @param \WooletClient\Model\Anchor $body Anchor object to update. (required)
     * @param string $anchor_id Identifier of anchor to update. (required)
     *
     * @return array of \WooletClient\Model\Anchor, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \WooletClient\ApiException on non-2xx response
     */
    public function updateAnchorWithHttpInfo($body, $anchor_id)
    {
        $returnType = '\WooletClient\Model\Anchor';
        $request = $this->updateAnchorRequest($body, $anchor_id);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            $statusCode = $response->getStatusCode();
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WooletClient\Model\Anchor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAnchorAsync
     *
     * Update an anchor.
     *
     * @param \WooletClient\Model\Anchor $body Anchor object to update. (required)
     * @param string $anchor_id Identifier of anchor to update. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function updateAnchorAsync($body, $anchor_id)
    {
        return $this->updateAnchorAsyncWithHttpInfo($body, $anchor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAnchorAsyncWithHttpInfo
     *
     * Update an anchor.
     *
     * @param \WooletClient\Model\Anchor $body Anchor object to update. (required)
     * @param string $anchor_id Identifier of anchor to update. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function updateAnchorAsyncWithHttpInfo($body, $anchor_id)
    {
        $returnType = '\WooletClient\Model\Anchor';
        $request = $this->updateAnchorRequest($body, $anchor_id);
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAnchor'
     *
     * @param \WooletClient\Model\Anchor $body Anchor object to update. (required)
     * @param string $anchor_id Identifier of anchor to update. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function updateAnchorRequest($body, $anchor_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateAnchor'
            );
        }
        // verify the required parameter 'anchor_id' is set
        if ($anchor_id === null || (is_array($anchor_id) && count($anchor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $anchor_id when calling updateAnchor'
            );
        }
        $resourcePath = '/anchor/{anchorId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        // path params
        if ($anchor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'anchorId' . '}',
                ObjectSerializer::toPathValue($anchor_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );
        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }
        return $options;
    }
}
